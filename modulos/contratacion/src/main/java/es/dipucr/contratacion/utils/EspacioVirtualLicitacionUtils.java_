package es.dipucr.contratacion.utils;

import ieci.tdw.ispac.api.errors.ISPACException;
import ieci.tdw.ispac.api.errors.ISPACRuleException;
import ieci.tdw.ispac.api.item.IItem;
import ieci.tdw.ispac.ispaclib.context.IClientContext;

import org.apache.log4j.Logger;

import es.dipucr.contratacion.common.DipucrFuncionesComunes;
import es.dipucr.contratacion.objeto.BOP;
import es.dipucr.contratacion.objeto.DatosContrato;
import es.dipucr.contratacion.objeto.DatosEmpresa;
import es.dipucr.contratacion.objeto.DatosLicitacion;
import es.dipucr.contratacion.objeto.DatosTramitacion;
import es.dipucr.contratacion.objeto.DiariosFechaOficiales;
import es.dipucr.contratacion.objeto.DiariosOficiales;
import es.dipucr.contratacion.objeto.Peticion;
import es.dipucr.contratacion.objeto.Solvencia;
import es.dipucr.contratacion.services.PlataformaContratacionStub.Clasificacion;
import es.dipucr.contratacion.services.PlataformaContratacionStub.Garantia;
import es.dipucr.contratacion.services.PlataformaContratacionStub.LicitadorBean;
import es.dipucr.contratacion.services.PlataformaContratacionStub.Lotes;
import es.dipucr.contratacion.services.PlataformaContratacionStub.OrganoAsistencia;
import es.dipucr.contratacion.services.PlataformaContratacionStub.PersonalContacto;
import es.dipucr.contratacion.services.PlataformaContratacionStub.PublicacionesOficialesBean;
import es.dipucr.contratacion.services.PlataformaContratacionStub.SobreElectronico;

public class EspacioVirtualLicitacionUtils {

	public static final Logger LOGGER = Logger.getLogger(EspacioVirtualLicitacionUtils.class);
	
	public static es.dipucr.contratacion.services.PlataformaContratacionStub.EspacioVirtualLicitacionBean getEspacioVirtualLicitacionBean(IClientContext cct, String numexp, IItem datosTram) throws ISPACRuleException{
		es.dipucr.contratacion.services.PlataformaContratacionStub.EspacioVirtualLicitacionBean anuncioLicitacion = new es.dipucr.contratacion.services.PlataformaContratacionStub.EspacioVirtualLicitacionBean();
		
		try{
			//Num Expediente
			anuncioLicitacion.setNumexp(numexp);
			
			DatosContrato datContrato = DipucrFuncionesComunes.getDatosContrato(cct, numexp);
			if(datContrato!=null){
				anuncioLicitacion.setObjetoContrato(datContrato.getObjetoContrato());
				anuncioLicitacion.setProcContratacion(datContrato.getProcedimientoContratacion());
				anuncioLicitacion.setTipoContrato(datContrato.getTipoContrato());
				anuncioLicitacion.setSubTipoContrato(datContrato.getSubTipoContrato());
				anuncioLicitacion.setOrganoContratacion(datContrato.getOrganoContratacion());
				anuncioLicitacion.setTipoTramitacion(datContrato.getTipoTramitacion());
				anuncioLicitacion.setTramitacionGasto(datContrato.getTramitacionGasto());
				anuncioLicitacion.setCpv(datContrato.getCpv());
				anuncioLicitacion.setLugarEjecucionContrato(datContrato.getProvinciaContrato());
				anuncioLicitacion.setValorEstimadoContrato(datContrato.getValorEstimadoContrato());
			}
			
			DiariosFechaOficiales diariosOficiales = DipucrFuncionesComunes.getFechaDiariosOficiales(cct, numexp);
			if(diariosOficiales!=null){
				if(diariosOficiales.getContratoSujetoRegArmon()!=null){
					anuncioLicitacion.setContratoSujetoRegArmon(diariosOficiales.getContratoSujetoRegArmon());
				}
			}
			
			DatosTramitacion datosTramitacion = DipucrFuncionesComunes.getDatosTramitacion(cct, numexp, datosTram);
			if(datosTramitacion!=null){
				if(datosTramitacion.getPresentacionOfertas()!=null){
					anuncioLicitacion.setPresentacionOfertas(datosTramitacion.getPresentacionOfertas());
					anuncioLicitacion.setFechaPresentacionSolcitudesParticipacion(datosTramitacion.getPresentacionOfertas().getEndCalendar());
					anuncioLicitacion.setDuracionContrato(datosTramitacion.getDuracionContrato());
				}
			}
			
			//Compruebo que el tipo de contrato no sea Patrimonial
			//Porque si no coge los datos del presupuesto de la entidad datos del contrato
			if(!datContrato.getTipoContrato().getId().equals("50")){
				Peticion peticion = DipucrFuncionesComunes.getPeticion(cct, numexp);
				anuncioLicitacion.setPresupuestoConIva(peticion.getPresupuestoConIva());
				anuncioLicitacion.setPresupuestoSinIva(peticion.getPresupuestoSinIva());
			}
			else{
				String [] presupuesto =  DipucrFuncionesComunes.getDatosContratoPresupuesto(cct, numexp);
				if(presupuesto!=null && presupuesto.length==2){
					anuncioLicitacion.setPresupuestoConIva(presupuesto[0]);
					anuncioLicitacion.setPresupuestoSinIva(presupuesto[1]);
				}
			}
			
			DatosEmpresa datEmpresa = DipucrFuncionesComunes.getDatosEmpresa(cct, numexp);
			if(datEmpresa.getClasificacion()!=null && datEmpresa.getClasificacionEvidence()!=null){
				Clasificacion clasificacion = new Clasificacion();
				clasificacion.setClasificacion(datEmpresa.getClasificacion());
				clasificacion.setClasificacionAcreditarRequisito(datEmpresa.getClasificacionEvidence());
				anuncioLicitacion.setClasificacion(clasificacion);
			}
			
			
			
			anuncioLicitacion.setCondLicit(datEmpresa.getCondLicit());
			anuncioLicitacion.setReqDecl(datEmpresa.getTipoDeclaracion());
			
			DatosLicitacion datosLicitacion= DipucrFuncionesComunes.getDatosLicitacion(cct, numexp);
			anuncioLicitacion.setTipoPresentacionOferta(datosLicitacion.getTipoPresentacionOferta());
			OrganoAsistencia organoAsistencia = datosLicitacion.getOrganoAsistencia();
			anuncioLicitacion.setApliPesu(datosLicitacion.getAplicacionPres());
			//Falta por introducir la entidad 'Criterios de adjudicación'
			anuncioLicitacion.setCriterios(datosLicitacion.getCritAdj());
			anuncioLicitacion.setVarOfert(datosLicitacion.getVariantes());
			anuncioLicitacion.setFundacionPrograma(datosLicitacion.getFundacionPrograma());
			anuncioLicitacion.setFormulaRevisionPrecios(datosLicitacion.getRevisionPrecios());
		
			PublicacionesOficialesBean publicacionesOficiales = null;			
			DiariosOficiales diariosOficialesAnuncio =  DipucrFuncionesComunes.getDiariosOficiales(cct, numexp, "AnuncioLicitacionRule");
			BOP bop = DipucrFuncionesComunes.getBOP(cct, numexp);			
			if(diariosOficialesAnuncio !=null || bop!=null){
				publicacionesOficiales = new PublicacionesOficialesBean();
				if(diariosOficialesAnuncio.getDoue() !=null){
					publicacionesOficiales.setEnviarDOUE(diariosOficialesAnuncio.getDoue().isPublicarDOUE());
				}
				if(diariosOficialesAnuncio.getBoe() !=null){
					publicacionesOficiales.setEnviarBOE(diariosOficialesAnuncio.getBoe().isPublicarBOE());
				}
				if(bop!=null){
					publicacionesOficiales.setNombreOtrosDiarios(bop.getNombreBOP());
					publicacionesOficiales.setFechaPubOtrosDiarios(bop.getFechaPublicacion());
					publicacionesOficiales.setPublishURLOtrosDiarios(bop.getUrlPublicacion());
				}
				
				anuncioLicitacion.setDiarios(publicacionesOficiales);
			}
			
			SobreElectronico [] sobreElect = DipucrFuncionesComunes.getSobreElec(cct, numexp);
			anuncioLicitacion.setSobreElect(sobreElect);
			
			Solvencia solvencia = DipucrFuncionesComunes.getSolvencia(cct, numexp);
			anuncioLicitacion.setSolvenciaEconomica(solvencia.getSolvenciaEconomica());
			anuncioLicitacion.setSolvenciaTecn(solvencia.getSolvenciaTecn());	
			
			//garantias
			Garantia[] garantia = DipucrFuncionesComunes.getGarantias(cct, numexp);
			anuncioLicitacion.setGarantia(garantia);
			
			//Personal contacto
			PersonalContacto[] persCon = DipucrFuncionesComunes.getPersonalContacto(cct, numexp);
			anuncioLicitacion.setPersonalContactoContratacion(persCon[0]);
			anuncioLicitacion.setPersonalContactoSecretaria(persCon[1]);
			if(organoAsistencia!=null){
				if(persCon[2]!=null){
					organoAsistencia.setInformacionOC(persCon[2]);
				}				
				anuncioLicitacion.setOrganoAsistencia(organoAsistencia);
			}
			
			//Licitadores
			LicitadorBean[] licitadores = DipucrFuncionesComunes.getLicitadores(cct, numexp);
			anuncioLicitacion.setLicitadores(licitadores);
			/*Documento docPCEA = DipucrFuncionesComunes.getDocumentoPliegos(cct, numexp, "PCEA", datContrato.getOrganoContratacion());
			if(docPCEA!=null){
				anuncioLicitacion.setDocumentoPCAP(docPCEA);
			}
			Documento docPPT = DipucrFuncionesComunes.getDocumentoPliegos(cct, numexp, "PPT", datContrato.getOrganoContratacion());
			if(docPPT!=null){
				anuncioLicitacion.setDocumentoPPT(docPPT);
			}*/
			
			//Lotes
			Lotes lotes = DipucrFuncionesComunes.getLotes(cct, numexp);
			anuncioLicitacion.setLotes(lotes);
			
			
		} catch (ISPACException e){
			LOGGER.error("Error al crear el objeto EspacioVirtualLicitacionBean para el expediente " + numexp + ". " + e.getMessage(), e);
			throw new ISPACRuleException("Error numexp " + numexp + " - " + e.getMessage(),e);
		}
	
		return anuncioLicitacion;
	}
}